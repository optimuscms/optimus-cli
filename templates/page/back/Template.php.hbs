<?php

namespace App\PageTemplates;

use App\Contracts\PageTemplate;
use App\Http\Resources\MediaResource;
use App\Models\Page;

class {{identifiers.file_name}}Template implements PageTemplate
{
    public static function getId(): string
    {
        return '{{identifiers.template_id}}';
    }

    public static function getName(): string
    {
        return '{{identifiers.template_name}}';
    }

    public static function validateData(array $data)
    {
        validator($data, [
        {{#no-break}}
        {{#each fields}}
            {{#if-type-is "string"}}'{{identifiers.snake}}' => '{{#if required}}required{{/if}}|string|max:255',{{/if-type-is}}

            {{#if-type-is "text"}}'{{identifiers.snake}}' => '{{#if required}}required{{/if}}|string',{{/if-type-is}}

            {{#if-type-is "url"}}'{{identifiers.snake}}' => '{{#if required}}required{{/if}}|url',{{/if-type-is}}

            {{#if-type-is "image"}}'{{identifiers.snake}}_id' => '{{#if required}}required{{/if}}|exists:media,id',{{/if-type-is}}
        {{/each}}
        {{/no-break}}

        ])->validate();
    }

    public static function saveData(Page $page, array $data)
    {
        $page->addContents([
        {{#no-break}}
        {{#each fields}}
            {{#if-type-is "string"}}'{{identifiers.snake}}' => $data['{{identifiers.snake}}'],{{/if-type-is}}
            
            {{#if-type-is "text"}}'{{identifiers.snake}}' => $data['{{identifiers.snake}}'],{{/if-type-is}}
            
            {{#if-type-is "url"}}'{{identifiers.snake}}' => $data['{{identifiers.snake}}'],{{/if-type-is}}
        {{/each}}
        {{/no-break}}

        ]);
        
        {{#each fields}}
        {{#if-type-is "image"}}
        $page->attachMedia($data['{{identifiers.snake}}_id'], '{{options.group}}', [
        {{#each options.conversions}}
            '{{this}}',
        {{/each}}
        ]);

        {{/if-type-is}}
        {{/each}}
    }

    public static function resetData(Page $page)
    {
        $page->clearContents();
        $page->detachMedia();
    }

    public static function getData(Page $page): array
    {
        return [
        {{#no-break}}
        {{#each fields}}
            {{#if-not-type-is "image"}}'{{identifiers.snake}}' => $page->getContent('{{identifiers.snake}}'),{{/if-not-type-is}}
                
            {{#if-type-is "image"}}'{{identifiers.snake}}' => new MediaResource($page->getFirstMedia('{{options.group}}')),{{/if-type-is}}
        {{/each}}
        {{/no-break}}
        
        ];
    }

    public static function render(Page $page)
    {
        return view('front.{{identifiers.template_id}}', compact('page'));
    }
}
