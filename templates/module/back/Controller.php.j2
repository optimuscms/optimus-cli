{% macro validation_rule(name, type, rules) %}
    '{{ name }}' => '
        {%- if rules.nullable %}nullable|{% endif %}
        {%- if rules.required %}required|{% endif %}
        {{- type -}}
    ',
{% endmacro -%}

<?php

namespace App\Http\Controllers\Back\Api;

use App\Http\Controllers\Back\Controller;
use App\Http\Resources\{{ name | singular | pascal }}Resource;
use App\Models\Meta;
use App\Models\{{ name | singular | pascal }};
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\ResourceCollection;
use Illuminate\Http\Response;

class {{ name | plural | pascal }}Controller extends Controller
{
    /**
     * Display a paginated list of {{ name | plural | lower }}.
     *
     * @param Request $request
     * @return ResourceCollection
     */
    public function index(Request $request)
    {
        /** @var Collection ${{ name | plural | camel }} */
        ${{ name | plural | camel }} = {{ name | singular | pascal }}::query()
            {% if has_feature('draft') %}
                ->withDrafts()
            {% endif -%}

            {% if has_feature('media') or has_feature('seo') %}
                ->with([
                    {% if has_feature('media') %}
                        'media',
                    {% endif -%}

                    {% if has_feature('seo') %}
                        'meta',
                    {% endif %}
                ])
            {% endif -%}

            {% if has_feature('sort') %}
                ->ordered()
            {% endif -%}

            ->applyFilters($request->all())
            ->paginate();

        return {{ name | singular | pascal }}Resource::collection(${{ name | plural | camel }});
    }

    /**
     * Create a new {{ name | singular | lower }}.
     *
     * @param Request $request
     * @return {{ name | singular | pascal }}Resource
     */
    public function store(Request $request)
    {
        $this->validate{{ name | singular | pascal }}($request);

        ${{ name | singular | camel }} = $this->populate{{ name | singular | pascal }}(
            new {{ name | singular | pascal }}(), $request
        );

        ${{ name | singular | camel }}->save();

        {% if has_feature('media') %}
            $this->attachMedia(${{ name | singular | camel }}, $request);
        {% endif %}

        {% if has_feature('seo') %}
            // Save meta...
            ${{ name | singular | camel }}->saveMeta(
                $request->input('meta', [])
            );
        {% endif %}

        {% if has_feature('draft') %}
            // Schedule the {{ name | singular | lower }}...
            ${{ name | singular | camel }}->publishAt(
                Carbon::parse($request->input('published_at'))
            );
        {% endif %}

        return new {{ name | singular | pascal }}Resource(${{ name | singular | camel }});
    }

    /**
     * Display the specified {{ name | singular | lower }}.
     *
     * @param int $id
     * @return {{ name | singular | pascal }}Resource
     */
    public function show($id)
    {
        /** @var {{ name | singular | pascal }} ${{ name | singular | pascal }} */
        ${{ name | singular | camel }} = {{ name | singular | pascal }}::query()
            {% if has_feature('draft') %}
                ->withDrafts()
            {% endif -%}

            {% if has_feature('media') or has_feature('seo') %}
                ->with([
                    {% if has_feature('media') %}
                        'media',
                    {% endif -%}

                    {% if has_feature('seo') %}
                        'meta',
                    {% endif %}
                ])
            {% endif %}
            ->findOrFail($id);

        return new {{ name | singular | pascal }}Resource(${{ name | singular | camel }});
    }

    /**
     * Update the specified {{ name | singular | lower }}.
     *
     * @param Request $request
     * @param int $id
     * @return {{ name | singular | pascal }}Resource
     */
    public function update(Request $request, $id)
    {
        /** @var {{ name | singular | camel }} ${{ name | singular | pascal }} */
        ${{ name | singular | camel }} = {{ name | singular | pascal }}::query()
            {% if has_feature('draft') %}
                ->withDrafts()
            {% endif %}
            ->findOrFail($id);

        $this->validate{{ name | singular | pascal }}($request);

        ${{ name | singular | camel }} = $this->populate{{ name | singular | pascal }}(
            ${{ name | singular | camel }}, $request
        );

        ${{ name | singular | camel }}->save();

        {% if has_feature('media') %}
            $this->detatchMedia();

            $this->attachMedia(${{ name | singular | camel }}, $request);
        {% endif %}

        {% if has_feature('seo') %}
            // Save meta...
            ${{ name | singular | camel }}->saveMeta(
                $request->input('meta', [])
            );
        {% endif %}

        {% if has_feature('draft') %}
            // Schedule the {{ name | singular | lower }}...
            ${{ name | singular | camel }}->publishAt(
                Carbon::parse($request->input('published_at'))
            );
        {% endif %}

        return new {{ name | singular | pascal }}Resource(${{ name | singular | camel }});
    }

    {% if has_feature('sort') %}
        /**
        * Move the specified {{ name | singular | lower }}.
        *
        * @param Request $request
        * @param int $id
        * @return Response
        */
        public function move(Request $request, $id)
        {
            ${{ name | singular | camel }} = {{ name | singular | pascal }}::query()
                {% if has_feature('draft') %}
                    ->withDrafts()
                {% endif %}
                ->findOrFail($id);

            $request->validate([
                'direction' => 'required|in:up,down',
            ]);

            $request->input('direction') === 'down'
                ? ${{ name | singular | camel }}->moveOrderDown()
                : ${{ name | singular | camel }}->moveOrderUp();

            return response()->noContent();
        }
    {% endif %}

    /**
     * Delete the specified {{ name | singular | lower }}.
     *
     * @param int $id
     * @return Response
     */
    public function destroy($id)
    {
        {{ name | singular | camel }}::query()
            {% if has_feature('draft') %}
                ->withDrafts()
            {% endif -%}

            ->findOrFail($id)
            ->delete();

        return response()->noContent();
    }

    /**
     * Validate the request.
     *
     * @param Request $request
     * @return void*
     */
    protected function validate{{ name | singular | pascal }}(Request $request)
    {
        {% if has_feature('seo') %}
            $request->validate(array_merge([
        {% else %}
            $request->validate([
        {% endif -%}

        {% for field in fields %}
            {%- if field.type == 'text' %}
                {{ validation_rule(field.name, 'string|max:255', field.rules) }}
            
            {%- elif field.type == 'textarea' or field.type == 'editor' %}
                {{ validation_rule(field.name, 'string', field.rules) }}
            
            {%- elif field.type == 'date' %}
                {{ validation_rule(field.name, 'date', field.rules) }}

            {%- elif field.type == 'image' %}
                {{ validation_rule(field.name ~ '_id', 'exists:media,id', field.rules) }}
            {%- endif %}
        {% endfor -%}

        
        {%- for feature in features %}
            {% if feature.type == 'slug' %}
                {{ validation_rule(feature.options.save_to_field, 'string|max:255', {'required': False, 'nullable': True}) }}
            {% endif %}
        {% endfor %}

        {% if has_feature('seo') %}
            ], Meta::rules()));
        {% else %}
            ]);
        {% endif %}
    }

    protected function populate{{ name | singular | pascal }}(
        {{ name | singular | pascal }} ${{ name | singular | camel }},
        Request $request
    ) {
        return tap (${{ name | singular | camel }}, function ({{ name | singular | pascal }} ${{ name | singular | camel }}) use (
            $request
        ) {
            {% for field in fields %}
                {% if not field.type == 'image' %}
                    ${{ name | singular | camel }}->{{ field.name }} = $request->input('{{ field.name }}');
                {% endif %}
            {% endfor %}

            {%- for feature in features %}
                {% if feature.type == 'slug' %}
                    $table->string('{{ feature.options.save_to_field }})->nullable();
                {% endif %}
            {% endfor %}
        }
        });
    }

    {% if has_feature('media') %}
        protected function attachMedia (
            {{ name | singular | pascal }} ${{ name | singular | camel }}, 
            Request $request
        ) {
            {% for field in fields %}
                {% if field.type == 'image'  %}
                    ${{ name | singular | camel }}->attachMedia(
                        $request->input('{{ field.name }}_id'),
                        '{{ field.name }}'
                    );
                {% endif %}
            {% endfor %}
    {% endif %}
}
