{% macro validation_rule(field_name, field_validation, is_required, is_nullable) -%}
    '{{ field_name }}' => '
        {%- if is_nullable %}nullable|{% endif -%}
        {%- if is_required %}required|{% endif -%}
        {{ field_validation -}}
    ',
{%- endmacro %}

<?php

namespace App\Http\Controllers\Back\Api;

use App\Http\Controllers\Back\Controller;
use App\Http\Resources\{{ identifiers.pascal_singular }}Resource;
use App\Models\Meta;
use App\Models\{{ identifiers.pascal_singular }};
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\ResourceCollection;
use Illuminate\Http\Response;

class {{ identifiers.pascal_plural }}Controller extends Controller
{
    /**
     * Display a paginated list of {{ identifiers.label_plural | lower }}.
     *
     * @param Request $request
     * @return ResourceCollection
     */
    public function index(Request $request)
    {
        /** @var Collection ${{ identifiers.camel_plural }} */
        ${{ identifiers.camel_plural }} = {{ identifiers.pascal_singular }}::query()
            {% if has_feature('Draftable') %}
                ->withDrafts()
            {% endif -%}

            {% if has_feature('HasMedia') or has_feature('HasSeoFields') %}
                ->with([
                    {% if has_feature('HasMedia') %}
                        'media',
                    {% endif -%}

                    {% if has_feature('HasSeoFields') %}
                        'meta',
                    {% endif -%}
                ])
            {% endif -%}

            {% if has_feature('Sortable') %}
                ->ordered()
            {% endif -%}

            ->applyFilters($request->all())
            ->paginate();

        return {{ identifiers.pascal_singular }}Resource::collection(${{ identifiers.camel_plural }});
    }

    /**
     * Create a new {{ identifiers.label_singular | lower }}.
     *
     * @param Request $request
     * @return {{ identifiers.pascal_singular }}Resource
     */
    public function store(Request $request)
    {
        $this->validate{{ identifiers.pascal_singular }}($request);

        ${{ identifiers.camel_singular }} = $this->populate{{ identifiers.pascal_singular }}(
            new {{ identifiers.pascal_singular }}(), $request
        );

        ${{ identifiers.camel_singular }}->save();

        {% if has_feature('HasMedia') %}
            $this->attachMedia(${{ identifiers.camel_singular }}, $request);
        {% endif %}

        {% if has_feature('HasSeoFields') %}
            // Save meta...
            ${{ identifiers.camel_singular }}->saveMeta(
                $request->input('meta', [])
            );
        {% endif %}

        {% if has_feature('Draftable') %}
            // Schedule the {{ identifiers.label_singular | lower }}...
            ${{ identifiers.camel_singular }}->publishAt(
                Carbon::parse($request->input('published_at'))
            );
        {% endif %}

        return new {{ identifiers.pascal_singular }}Resource(${{ identifiers.camel_singular }});
    }

    /**
     * Display the specified {{ identifiers.label_singular | lower }}.
     *
     * @param int $id
     * @return {{ identifiers.pascal_singular }}Resource
     */
    public function show($id)
    {
        /** @var {{ identifiers.pascal_singular }} ${{ identifiers.pascal_singular }} */
        ${{ identifiers.camel_singular }} = {{ identifiers.pascal_singular }}::query()
            {% if has_feature('Draftable') %}
                ->withDrafts()
            {% endif -%}

            {% if has_feature('HasMedia') or has_feature('HasSeoFields') %}
                ->with([
                    {% if has_feature('HasMedia') %}
                        'media',
                    {% endif -%}

                    {% if has_feature('HasSeoFields') %}
                        'meta',
                    {% endif -%}
                ])
            {% endif -%}

            ->findOrFail($id);

        return new {{ identifiers.pascal_singular }}Resource(${{ identifiers.camel_singular }});
    }

    /**
     * Update the specified {{ identifiers.label_singular | lower }}.
     *
     * @param Request $request
     * @param int $id
     * @return {{ identifiers.pascal_singular }}Resource
     */
    public function update(Request $request, $id)
    {
        /** @var {{ identifiers.camel_singular }} ${{ identifiers.pascal_singular }} */
        ${{ identifiers.camel_singular }} = {{ identifiers.pascal_singular }}::query()
            {% if has_feature('Draftable') %}
                ->withDrafts()
            {% endif %}

            ->findOrFail($id);

        $this->validate{{ identifiers.pascal_singular }}($request);

        ${{ identifiers.camel_singular }} = $this->populate{{ identifiers.pascal_singular }}(
            ${{ identifiers.camel_singular }}, $request
        );

        ${{ identifiers.camel_singular }}->save();

        {% if has_feature('HasMedia') %}
            $this->detatchMedia();

            $this->attachMedia(${{ identifiers.camel_singular }}, $request);
        {% endif %}

        {% if has_feature('HasSeoFields') %}
            // Save meta...
            ${{ identifiers.camel_singular }}->saveMeta(
                $request->input('meta', [])
            );
        {% endif %}

        {% if has_feature('Draftable') %}
            // Schedule the {{ identifiers.label_singular | lower }}...
            ${{ identifiers.camel_singular }}->publishAt(
                Carbon::parse($request->input('published_at'))
            );
        {% endif %}

        return new {{ identifiers.pascal_singular }}Resource(${{ identifiers.camel_singular }});
    }

    {% if has_feature('Sortable') %}
        /**
        * Move the specified {{ identifiers.label_singular | lower }}.
        *
        * @param Request $request
        * @param int $id
        * @return Response
        */
        public function move(Request $request, $id)
        {
            ${{ identifiers.camel_singular }} = {{ identifiers.pascal_singular }}::query()
                {% if has_feature('Draftable') %}
                    ->withDrafts()
                {% endif -%}

                ->findOrFail($id);

            $request->validate([
                'direction' => 'required|in:up,down',
            ]);

            $request->input('direction') === 'down'
                ? ${{ identifiers.camel_singular }}->moveOrderDown()
                : ${{ identifiers.camel_singular }}->moveOrderUp();

            return response()->noContent();
        }
    {% endif %}

    /**
     * Delete the specified {{ identifiers.label_singular | lower }}.
     *
     * @param int $id
     * @return Response
     */
    public function destroy($id)
    {
        {{ identifiers.camel_singular }}::query()
            {% if has_feature('Draftable') %}
                ->withDrafts()
            {% endif -%}

            ->findOrFail($id)
            ->delete();

        return response()->noContent();
    }

    /**
     * Validate the request.
     *
     * @param Request $request
     * @return void*
     */
    protected function validate{{ identifiers.pascal_singular }}(Request $request)
    {
        {% if has_feature('HasSeoFields') %}
            $request->validate(array_merge([
        {% else %}
            $request->validate([
        {% endif -%}

        {% for field in fields %}
            {% if field.validate_in_controller %}
                {% if 'string' in field.type %}
                    {{ validation_rule(field.identifiers.snake, 'string:max:255', field.required, field.nullable) }}
                {% endif -%}

                {% if 'text' in field.type %}
                    {{ validation_rule(field.identifiers.snake, 'string', field.required, field.nullable) }}
                {% endif -%}

                {% if 'date' in field.type %}
                    {{ validation_rule(field.identifiers.snake, 'date', field.required, field.nullable) }}
                {% endif -%}

                {% if 'integer' in field.type %}
                    {{ validation_rule(field.identifiers.snake, 'number', field.required, field.nullable) }}
                {% endif -%}

                {% if 'boolean' in field.type %}
                    {{ validation_rule(field.identifiers.snake, 'boolean', field.required, field.nullable) }}
                {% endif -%}

                {% if 'image' in field.type %}
                    {{ validation_rule(field.identifiers.snake, 'exists:media,id', field.required, field.nullable) }}
                {% endif -%}
            {% endif %}
        {% endfor -%}

        {% if has_feature('HasSeoFields') %}
            ], Meta::rules()));
        {% else %}
            ]);
        {% endif %}
    }

    protected function populate{{ identifiers.pascal_singular }}(
        {{ identifiers.pascal_singular }} ${{ identifiers.camel_singular }},
        Request $request
    ) {
        return tap (${{ identifiers.camel_singular }}, function ({{ identifiers.pascal_singular }} ${{ identifiers.camel_singular }}) use (
            $request
        ) {
            {% for field in fields %}
                {% if field.update_in_controller and not 'image' in field.type %}
                    ${{ identifiers.camel_singular }}->{{ field.identifiers.snake }} = $request->input('{{ field.identifiers.snake }}');
                {% endif %}
            {% endfor %}
        });
    }

    {% if has_feature('HasMedia') %}
        protected function attachMedia (
            {{ identifiers.pascal_singular }} ${{ identifiers.camel_singular }}, 
            Request $request
        ) {
            {% for field in fields %}
                {% if field.update_in_controller and 'image' in field.type %}
                    ${{ identifiers.camel_singular }}->attachMedia(
                            $request->input('{{ field.identifiers.snake }}_id'),
                            '{{ field.identifiers.snake }}'
                        );
                {% endif %}
            {% endfor %}
        }
    {% endif %}
}
