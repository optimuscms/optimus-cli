<?php

namespace App\Http\Controllers\Back\Api;

use App\Http\Controllers\Back\Controller;
use App\Http\Resources\{{identifiers.pascal_singular}}Resource;
use App\Models\Meta;
use App\Models\{{identifiers.pascal_singular}};
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\ResourceCollection;
use Illuminate\Http\Response;

class {{identifiers.pascal_plural}}Controller extends Controller
{
    /**
     * Display a paginated list of {{#to-lower}}{{identifiers.label_plural}}{{/to-lower}}.
     *
     * @param Request $request
     * @return ResourceCollection
     */
    public function index(Request $request)
    {
        /** @var Collection ${{identifiers.camel_plural}} */
        ${{identifiers.camel_plural}} = {{identifiers.pascal_singular}}::query()
            {{#if-has-feature "Draftable"}}->withDrafts(){{/if-has-feature}}
            ->with({{#no-trailing-comma}}{{#if-has-feature "HasMedia"}}'media',{{/if-has-feature}}{{#if-has-feature "HasSeoFields"}}'meta',{{/if-has-feature}}{{/no-trailing-comma}})
            {{#if-has-feature "Sortable"}}->ordered(){{/if-has-feature}}
            ->applyFilters($request->all())
            ->paginate();

        return {{identifiers.pascal_singular}}Resource::collection(${{identifiers.camel_plural}});
    }

    /**
     * Create a new {{#to-lower}}{{identifiers.label_singular}}{{/to-lower}}.
     *
     * @param Request $request
     * @return {{identifiers.pascal_singular}}Resource
     */
    public function store(Request $request)
    {
        $this->validate{{identifiers.pascal_singular}}($request);

        ${{identifiers.camel_singular}} = $this->populate{{identifiers.pascal_singular}}(
            new {{identifiers.pascal_singular}}(), $request
        );

        ${{identifiers.camel_singular}}->save();

        {{#if-has-feature "HasMedia"}}
        $this->attachMedia(${{identifiers.camel_singular}}, $request);
        {{/if-has-feature}}

        {{#if-has-feature "HasSeoFields"}}
        // Save meta...
        ${{identifiers.camel_singular}}->saveMeta(
            $request->input('meta', [])
        );
        {{/if-has-feature}}

        {{#if-has-feature "Draftable"}}
        // Schedule the {{identifiers.label_singular}}...
        ${{identifiers.camel_singular}}->publishAt(
            Carbon::parse($request->input('published_at'))
        );
        {{/if-has-feature}}

        return new {{identifiers.pascal_singular}}Resource(${{identifiers.camel_singular}});
    }

    /**
     * Display the specified {{#to-lower}}{{identifiers.label_singular}}{{/to-lower}}.
     *
     * @param int $id
     * @return {{identifiers.pascal_singular}}Resource
     */
    public function show($id)
    {
        /** @var {{identifiers.pascal_singular}} ${{identifiers.pascal_singular}} */
        ${{identifiers.camel_singular}} = {{identifiers.pascal_singular}}::query()
            {{#if-has-feature "Draftable"}}->withDrafts(){{/if-has-feature}}
            ->with({{#no-trailing-comma}}{{#if-has-feature "HasMedia"}}'media',{{/if-has-feature}}{{#if-has-feature "HasSeoFields"}}'meta',{{/if-has-feature}}{{/no-trailing-comma}})
            ->findOrFail($id);

        return new {{identifiers.pascal_singular}}Resource(${{identifiers.camel_singular}});
    }

    /**
     * Update the specified {{#to-lower}}{{identifiers.label_singular}}{{/to-lower}}.
     *
     * @param Request $request
     * @param int $id
     * @return {{identifiers.pascal_singular}}Resource
     */
    public function update(Request $request, $id)
    {
        /** @var {{identifiers.camel_singular}} ${{identifiers.pascal_singular}} */
        ${{identifiers.camel_singular}} = {{identifiers.pascal_singular}}::query()
            {{#if-has-feature "Draftable"}}->withDrafts(){{/if-has-feature}}
            ->findOrFail($id);

        $this->validate{{identifiers.pascal_singular}}($request);

        ${{identifiers.camel_singular}} = $this->populate{{identifiers.pascal_singular}}(
            ${{identifiers.camel_singular}}, $request
        );
        
        ${{identifiers.camel_singular}}->save();
        
        {{#if-has-feature "HasMedia"}}
        $this->attachMedia(${{identifiers.camel_singular}}, $request);
        {{/if-has-feature}}

        {{#if-has-feature "HasSeoFields"}}
        // Save meta...
        ${{identifiers.camel_singular}}->saveMeta(
            $request->input('meta', [])
        );
        {{/if-has-feature}}

        {{#if-has-feature "Draftable"}}
        // Schedule the {{identifiers.label_singular}}...
        ${{identifiers.camel_singular}}->publishAt(
            Carbon::parse($request->input('published_at'))
        );
        {{/if-has-feature}}

        return new {{identifiers.pascal_singular}}Resource(${{identifiers.camel_singular}});
    }

    {{#if-has-feature "Sortable"}}
    /**
    * Move the specified {{#to-lower}}{{identifiers.label_singular}}{{/to-lower}}.
    *
    * @param Request $request
    * @param int $id
    * @return Response
    */
    public function move(Request $request, $id)
    {
        ${{identifiers.camel_singular}} = {{identifiers.pascal_singular}}::query()
            {{#if-has-feature "Draftable"}}->withDrafts(){{/if-has-feature}}
            ->findOrFail($id);

        $request->validate([
            'direction' => 'required|in:up,down',
        ]);

        $request->input('direction') === 'down'
            ? ${{identifiers.camel_singular}}->moveOrderDown()
            : ${{identifiers.camel_singular}}->moveOrderUp();

        return response()->noContent();
    }
    {{/if-has-feature}}

    /**
     * Delete the specified {{#to-lower}}{{identifiers.label_singular}}{{/to-lower}}.
     *
     * @param int $id
     * @return Response
     */
    public function destroy($id)
    {
        {{identifiers.camel_singular}}::query()
            {{#if-has-feature "Draftable"}}->withDrafts(){{/if-has-feature}}
            ->findOrFail($id)
            ->delete();

        return response()->noContent();
    }

    /**
     * Validate the request.
     *
     * @param Request $request
     * @return void*
     */
    protected function validate{{identifiers.pascal_singular}}(Request $request)
    {
        {{#no-break}}

        {{#if-has-feature "HasSeoFields"}}$request->validate(array_merge([{{/if-has-feature}}

        {{#if-not-has-feature "HasSeoFields"}}$request->validate([{{/if-not-has-feature}}

        {{#each fields}}
        {{#if validate_in_controller}}
            {{#if-type-is "string"}}'{{identifiers.snake}}' => '{{#if this.nullable}}nullable|{{/if}}{{#if required}}required|{{/if}}string|max:255',{{/if-type-is}}
            
            {{#if-type-is "text"}}'{{identifiers.snake}}' => '{{#if this.nullable}}nullable|{{/if}}{{#if required}}required|{{/if}}string',{{/if-type-is}}
            
            {{#if-type-is "date"}}'{{identifiers.snake}}' => '{{#if this.nullable}}nullable|{{/if}}{{#if required}}required|{{/if}}date',{{/if-type-is}}
            
            {{#if-type-is "integer"}}'{{identifiers.snake}}' => '{{#if this.nullable}}nullable|{{/if}}{{#if required}}required|{{/if}}number',{{/if-type-is}}
            
            {{#if-type-is "boolean"}}'{{identifiers.snake}}' => '{{#if this.nullable}}nullable|{{/if}}{{#if required}}present|{{/if}}boolean',{{/if-type-is}}
            
            {{#if-type-is "image"}}'{{identifiers.snake}}_id' => '{{#if this.nullable}}nullable|{{/if}}{{#if required}}required|{{/if}}exists:media,id',{{/if-type-is}}
        {{/if}}
        {{/each}}

        {{#if-has-feature "HasSeoFields"}}], Meta::rules()));{{/if-has-feature}}

        {{#if-not-has-feature "HasSeoFields"}}]);{{/if-not-has-feature}}
        {{/no-break}}

    }

    protected function populate{{identifiers.pascal_singular}}({{identifiers.pascal_singular}} ${{identifiers.camel_singular}}, Request $request)
    {
        return tap (${{identifiers.camel_singular}}, function ({{identifiers.pascal_singular}} ${{identifiers.camel_singular}}) use ($request) {
        {{#each fields}}
            {{#if update_in_controller}}
            {{#if-not-type-is "image"}}
            ${{@root.identifiers.camel_singular}}->{{identifiers.snake}} = $request->input('{{identifiers.snake}}');
            {{/if-not-type-is}}
            {{/if}}
        {{/each}}
        });
    }

    {{#if-has-feature "HasMedia"}}
    protected function attachMedia ({{identifiers.pascal_singular}} ${{identifiers.camel_singular}}, Request $request)
    {
    {{#each fields}}
        {{#if update_in_controller}}
        {{#if-type-is "image"}}
        ${{@root.identifiers.camel_singular}}->attachMedia(
            $request->input('{{identifiers.snake}}_id'),
            '{{identifiers.snake}}'
        );
        {{/if-type-is}}
        {{/if}}
    {{/each}}
    }
    {{/if-has-feature}}
}
