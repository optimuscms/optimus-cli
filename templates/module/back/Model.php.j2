<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
{% if has_feature('draft') %}
    use Optix\Draftable\Draftable;
{% endif -%}

{% if has_feature('slug') %}
    use Spatie\Sluggable\HasSlug;
    use Spatie\Sluggable\SlugOptions;
{% endif -%}

{% if has_feature('media') %}
    use Optix\Media\HasMedia;
{% endif -%}

{% if has_feature('seo') %}
    use App\Traits\HasSeoFields;
{% endif -%}

{% if has_feature('menu') %}
    use App\Contracts\Linkable;
    use App\Traits\LinkableTrait;
    use App\Contracts\SynchronisesMenuItemUrls;
{% endif -%}

{% if has_feature('sort') %}
    use Spatie\EloquentSortable\Sortable;
    use Spatie\EloquentSortable\SortableTrait;
{% endif %}

class {{ name | singular | pascal }} extends Model implements {{ get_model_parents() }}
{
    use {{ get_model_traits() }};
    
    {% for feature in features %}
        {% if feature.type == 'draft' %}
            /**
            * The attributes that should be cast to native types.
            *
            * @var array
            */
            protected $casts = [
                'is_published' => 'bool',
            ];

            /**
            * The attributes that should be mutated to dates.
            *
            * @var array
            */
            protected $dates = [
                '{{ feature.options.published_at_field }}',
            ];
        {% endif %}

        {% if feature.type == 'slug' %}
            /**
            * Get the model's slug options.
            *
            * @return SlugOptions
            */
            public function getSlugOptions(): SlugOptions
            {
                return SlugOptions::create()
                    ->generateSlugsFrom('{{ feature.options.generate_from_field }}')
                    ->saveSlugsTo('{{ feature.options.save_to_field }}');
            }

            /**
            * Find a {{ name | singular | lower }} with the given slug or fail.
            *
            * @param string $slug
            * @return mixed
            */
            public static function findBySlugOrFail($slug)
            {
                return self::query()
                    ->where('slug', $slug)
                    ->firstOrFail();
            }
        {% endif %}
        
        {% if feature.type == 'media' %}
            /**
            * Register the {{ name | singular | lower }} media groups.
            *
            * @return void
            */
            public function registerMediaGroups()
            {
                {% for group in feature.options.media_groups %}
                    $this->addMediaGroup('{{ group.name }}')
                        ->performConversions(
                            {% for conversion in group.conversions %}
                                '{{ conversion }}'{% if not loop.last %},{% endif -%}
                            {% endfor %}
                        );
                {% endfor %}
            }
        {% endif %}

        {% if feature.type == 'menu' %}
            /**
            * Returns the linkable type identifier for this model instance.
            *
            * @return string
            */
            public static function getLinkableTypeIdentifier(): string
            {
                return '{{ name | plural | kebab }}';
            }

            /**
            * Returns the linkable type name for this model instance.
            *
            * @return string
            */
            public static function getLinkableTypeName(): string
            {
                return '{{ name | plural }}';
            }

            /**
            * Returns the menu label for this model instance.
            *
            * @return string
            */
            public function getLabel(): string
            {
                return $this->{{ feature.options.label_field }};
            }

            /**
            * Builds the post URL for this model instance.
            *
            * @return string
            */
            public function getUrl(): string
            {
                return ''; //todo
            }

            /**
            * Determines if the URL for this instance has changed since the last save.
            *
            * @return bool
            */
            public function urlHasChanged(): bool
            {
                return $this->isDirty('{{ feature.options.url_field }}');
            }

            /**
            * Builds the query used to retrieve linkable {{ name | plural }}.
            *
            * @return Builder
            */
            public static function buildLinkableQuery(): Builder
            {
                return self::query();
            }

            /**
            * Builds the search query used to find linkable {{ name | singular }} items matching the provided query.
            *
            * @param string $input
            * @return Builder
            */
            public static function buildLinkableSearchQuery(string $input): Builder
            {
                return self::buildLinkableQuery()->where(
                    '{{ feature.options.search_query_field }}', 'like', '%'.$input.'%'
                );
            }
        {% endif %}

        {% if feature.type == 'sort' %}
            /**
            * The model's order options.
            *
            * @var array
            */
            protected $sortable = [
                'order_column_name' => '{{ feature.options.order_field }}',
            ];
        {% endif %}
    {% endfor %}

    /**
     * Apply filters to the query.
     *
     * @param Builder $query
     * @param array $filters
     * @return void
     */
    public function scopeApplyFilters(Builder $query, array $filters)
    {
        {% if has_feature('sort') %}
            // Sort
            if ($sort = $filters['sort'] ?? false) {
                if (in_array($sort, [
                    'title', '-title', 'published_at', '-published_at',
                ])) {
                    $column = ltrim($sort, '-');
                    $direction = Str::startsWith($sort, '-') ? 'desc' : 'asc';

                    $query->orderBy($column, $direction);
                }
            }
        {% endif %}
    }
}
